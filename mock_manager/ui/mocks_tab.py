import customtkinter as ctk 
import tkinter as tk 
from tkinter import ttk, messagebox
import threading
from services.mock_service import MockService

class MainTab(ctk.CTkFrame):
    def __init__(self, parent, config, update_status):
        super().__init__(parent)
        self.config = config
        self.update_status = update_status
        self.mock_service = MockService()
        self.pack(fill="both", expand = True)
        self.build_ui()

    def build_ui(self):
    
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ctk.CTkFrame(self)
        control_frame.pack(fill="x", padx=10, pady=10)

        # –í—ã–±–æ—Ä –≥–µ–π—Ç–∞
        ctk.CTkLabel(control_frame, text="GATE:").grid(row=0, column=0, padx=5, pady=5)
        self.gate_var = ctk.StringVar(value=self.config.gate)
        print(self.gate_var)
        self.gate_var.trace_add("write",self.on_gate_changed)
        env_combo = ctk.CTkComboBox(
            control_frame, 
            values=list(self.config.gates),
            variable=self.gate_var,
            width=160,
            state="readonly"
            )
        env_combo.grid(row=0, column=1, padx=5, pady=5)
        
        btn = ctk.CTkButton(control_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command = self.load_mocks_gate, width=100)
        btn.grid(row=0, column=2, padx=5, pady=5)
 
        # –§—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_frame = ctk.CTkFrame(self)
        table_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º Treeview —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        columns = ("gate", "method", "path", "description", "group", "id")
        self.mock_tree = ttk.Treeview(
            table_frame, 
            columns=columns, 
            show="headings",
            selectmode="browse",
            style="Custom.Treeview")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        col_widths = [180, 150, 350, 500, 250, 400]
        col_headings = ["–ì–µ–π—Ç", "–ú–µ—Ç–æ–¥", "–ü—É—Ç—å", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ì—Ä—É–ø–ø–∞", "ID"]
        
        for col, width, heading in zip(columns, col_widths, col_headings):
            self.mock_tree.heading(col, text=heading)
            self.mock_tree.column(col, width=width, anchor="center")
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        vsb = ttk.Scrollbar(table_frame, orient="vertical", command=self.mock_tree.yview)
        self.mock_tree.configure(yscrollcommand=vsb.set)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        hsb = ttk.Scrollbar(table_frame, orient="horizontal", command=self.mock_tree.xview)
        self.mock_tree.configure(xscrollcommand=hsb.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.mock_tree.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—ã–±–æ—Ä–∞
        self.mock_tree.bind("<<TreeviewSelect>>", self.on_mock_select)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.style_treeview()

    def style_treeview(self):
        style = ttk.Style()
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        style.theme_use("default")
        style.configure("Custom.Treeview",
            background="#ffffff",
            foreground="#333333",
            rowheight=25,
            fieldbackground="#ffffff",
            borderwidth=0,
            font=("Segoe UI", 14)
        )
        style.configure("Custom.Treeview.Heading",
            background="#4a86e8",
            foreground="white",
            padding=5,
            font=("Segoe UI", 14, "bold")
        )
        style.map("Custom.Treeview",
            background=[('selected', '#4a86e8')],
            foreground=[('selected', 'white')]
        )
        
        # –î–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        if ctk.get_appearance_mode() == "Dark":
            style.configure("Custom.Treeview",
                background="#2b2b2b",
                foreground="#e0e0e0",
                fieldbackground="#2b2b2b",
            )
            style.configure("Custom.Treeview.Heading",
                background="#1f6aa5",
                foreground="white",
            )
            style.map("Custom.Treeview",
                background=[('selected', '#1f6aa5')],
                foreground=[('selected', 'white')]
            )
    # –°–º–µ–Ω–∞ –≥–µ–π—Ç–∞
    def on_gate_changed(self, *args):
        new_value = self.gate_var.get()
        if new_value == self.gate_var.get():
            print(f"–ì–µ–π—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_value}")
            self.config.gate = new_value
            self.update_status("–°–º–µ–Ω–∞ –ì–µ–π—Ç–∞...")
    

    def on_mock_select(self, event):
        selected_item = self.mock_tree.selection()
        if selected_item:
            item_values = self.mock_tree.item(selected_item[0],'values')
            self.selected_mock_id = item_values[5]
            self.show_context_menu()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫–æ–≤ (–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö)
    def load_mocks_gate(self):
        if not self.config.token:
            self.update_status("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω","error")
            return

        self.update_status("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∫–æ–≤...", "info")
        threading.Thread(target=self._load_mocks_gate_thread,daemon=True).start()

    def _load_mocks_gate_thread(self):
        gate = self.gate_var.get()
        result = self.mock_service.load_mocks_gate(gate)

        if result["success"]:
            if result.get("data"):
                self.after(0,self._populate_table,result["data"])
                count = len(result["data"])
                self.after(0,self.update_status, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –º–æ–∫–æ–≤","success")
            else:
                self.after(0, self.update_status, result.get("message", "‚ÑπÔ∏è –ú–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"), "info")
        else:
            self.after(0, self.update_status, f"‚ùå {result['error']}", "error")

    def get_mock_details(self,mock_id):
        try:
            result = self.mock_service.get_mock_details(mock_id)

            if result and "id" in result:
                self.selected_mock = result
                print(f"–¢–µ–∫—É—â–∏–π –º–æ–∫:{self.selected_mock}")
                self.after(0,self.open_editor_with_data, result)
            else:
                self.after(0,self.update_status,f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–∫–∞ {mock_id}","error")
        except Exception as e:
            self.after(0,self.update_status,f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}","error")


    def edit_mock(self):
        if hasattr(self,'selected_mock_id') and self.selected_mock_id:
            threading.Thread(target=self.get_mock_details,args=(self.selected_mock_id,),daemon=True).start()

    def delete_mock(self):
        if hasattr(self,'selected_mock_id') and self.selected_mock_id:
            confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ",f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ–¥–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–æ–∫ {self.selected_mock_id}?")
            if confirm:
                threading.Thread(target=self._delete_mock_thread,args=(self.selected_mock_id,),daemon=True).start()
    
    def _delete_mock_thread(self,mock_id):
        try:
            success = self.mock_service.delete_mock(mock_id)
            if success:
                self.after(0, self.update_status("üóë –ú–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω","success"))
                self.after(0,self.load_mocks_gate)
            else:
                 self.after(0, self.update_status("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–∫–∞"))
        except ValueError as ve:
            self.after(0, self.update_status(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(ve)}"))
        except Exception as e:
            self.after(0, self.update_status(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"))



    def open_editor_with_data(self,mock_data):
         # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        main_window = self.winfo_toplevel()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        main_window.tab_view.set("–†–µ–¥–∞–∫—Ç–æ—Ä")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        editor_tab = main_window.editor_tab
        editor_tab.load_mock_data(mock_data)

      

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ    
    def _populate_table(self,mocks_data):
        for item in self.mock_tree.get_children():
            self.mock_tree.delete(item)
        
        for mock in mocks_data:
            values = (
                mock.get('gate', ''),
                mock.get('httpMethod', ''),
                mock.get('requestPath', ''),
                mock.get('description', '') or '',
                mock.get('mockGroup', '') or '',
                mock.get('id','')
            )
            self.mock_tree.insert('','end',values=values)

    
    def show_context_menu(self):
        self.context_menu = tk.Menu(self, tearoff=0,bg="#2b2b2b",fg="white")

        self.context_menu.configure(font=("Arial",12))

        self.context_menu.add_command(label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",command=self.edit_mock)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å",command=self.delete_mock)

        x=self.winfo_pointerx()
        y=self.winfo_pointery()

        self.context_menu.post(x,y)
        


        